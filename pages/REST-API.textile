This is an overview of the operations you can perform over the HTTP interface to Riak, and can be used as a guide for developing a compliant client.  All URLs assume the default configuration values where applicable.  All examples use curl.


<div class="note"><div class="title">Client ID</div>All requests should include the "X-Riak-ClientId" header, which can be any string that uniquely identifies the client, for purposes of tracing object modifications in the [[vector clock|Riak Glossary]].</div>



<div class="note"><div class="title">URL Escaping</div>Buckets, keys, and link specifications may not contain unescaped slashes. Use a URL-escaping library or replace slashes with %2F.</div>

<div id="toc"></div>


h2. Bucket operations

Buckets in Riak are a virtual concept. They exist primarily as a namespace mechanism and as a mechanism to isolate specific behavior changes that deviate from the default bucket settings. For example, you may augment the [[number of replicas|Replication#Selecting-an-N-value-(n_val)]], the specific storage backend and [[commit hooks|Pre- and Post-Commit Hooks]]at the bucket level. 

<div class="info"><div class="title">How Many Buckets Can I Have?</div>
Currently, buckets come with virtually no cost except for when you modify the default bucket properties. Modified Bucket properties are gossiped around the cluster and therefore add to the amount of data sent around the network. In other words, buckets using the default bucket properties are free.
</div>

<div class="note"><div class="title">Delete Buckets</div>At the moment there is no straightforward way to delete an entire Bucket. There is, however, an open ticket for the feature. To delete all the keys in a bucket, you'll need to delete them all individually.</div>

h3. List buckets

Lists all known buckets (ones that have keys stored in them). *This feature is new in Riak 0.14.*

<div class="note"><div class="title">Not for production use</div>Similar to the list keys operation, this requires traversing all keys stored in the cluster and should not be used in production.</div>

h4. Request

```bash
GET /riak?buckets=true
```

Required query parameter:
* *buckets=true* - required to invoke the list-buckets functionality

h4. Response

Normal status codes:
* 200 OK

Important headers:
* Content-Type - application/json

The JSON object in the response will contain a single entry, "buckets", which will be an array of bucket names.

h4. Example

```bash
$ curl -i http://localhost:8098/riak?buckets=true
HTTP/1.1 200 OK
Vary: Accept-Encoding
Server: MochiWeb/1.1 WebMachine/1.7.3 (participate in the frantic)
Link: </riak/files>; rel="contained"
Date: Mon, 03 Jan 2011 19:21:00 GMT
Content-Type: application/json
Content-Length: 21

{"buckets":["files"]}
```

h3. Read bucket information

Reads the bucket properties and/or keys.

h4. Request


```bash
GET /riak/bucket
```

Optional query parameters:
* *props=[true|false]* - whether to return the bucket properties (true is the default)
* *keys=[true|false|stream]* - whether to return the keys stored in the bucket. (false is the default)

h4. Response

Normal status codes:
* 200 OK

Important headers:
* Content-Type - application/json

The JSON object in the response will contain up to two entries, "props" and "keys", which are present or missing, according to the optional query parameters.  The default is for both to be present.

If "keys=stream", the response will be transferred using chunked-encoding, where each chunk is a JSON object.  The first chunk will contain the "props" entry (if props was not set to false).  Subsequent chunks will contain individual JSON objects with the "keys" entry containing a sublist of the total keyset (some sublists may be empty).

h4. Example


```bash
$ curl -v http://127.0.0.1:8098/riak/test
* About to connect() to 127.0.0.1 port 8098 (#0)
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 8098 (#0)
> GET /riak/test HTTP/1.1
> User-Agent: curl/7.19.7 (universal-apple-darwin10.0) libcurl/7.19.7 OpenSSL/0.9.8l zlib/1.2.3
> Host: 127.0.0.1:8098
> Accept: */*
>
< HTTP/1.1 200 OK
< Vary: Accept-Encoding
< Server: MochiWeb/1.1 WebMachine/1.7.1 (participate in the frantic)
< Date: Wed, 14 Jul 2010 18:23:14 GMT
< Content-Type: application/json
< Content-Length: 368
<
* Connection #0 to host 127.0.0.1 left intact
* Closing connection #0
{"props":{"name":"test","n_val":3,"allow_mult":false,"last_write_wins":false,"precommit":[],"postcommit":[],"chash_keyfun":{"mod":"riak_core_util","fun":"chash_std_keyfun"},"linkfun":{"mod":"riak_kv_wm_link_walker","fun":"mapreduce_linkfun"},"old_vclock":86400,"young_vclock":20,"big_vclock":50,"small_vclock":10,"r":"quorum","w":"quorum","dw":"quorum","rw":"quorum"
```


h3. Set bucket properties

Sets bucket properties like "n_val" and "allow_mult".

h4. Request

```bash
PUT /riak/bucket
```

Important headers:
* Content-Type - application/json

The body of the request should be a JSON object with a single entry "props".  Unmodified bucket properties may be omitted.

Useful properties:

* *n_val* (integer > 0) - the number of replicas for objects in this bucket
* *allow_mult* (true or false) - whether to allow sibling objects to be created (concurrent updates)
* *last_write_wins* (true or false) - whether to ignore object history (vector clock) when writing
* *precommit* - [[precommit hooks|Pre- and Post-Commit Hooks]]
** postcommit* - [[postcommit hooks|Pre- and Post-Commit Hooks]]
* *r, w, dw, rw* - default quorum values for operations on keys in the bucket. Valid values are:
** _all_ - all nodes must respond
** _quorum_ - (n_val/2) + 1 nodes must respond. *This is the default.*
** _one_ - equivalent to 1
** _Any integer_ - must be less than or equal to n_val
* *backend* - when using riak_kv_multi_backend, which named backend to use for the bucket

<div class="note">
Make sure you use the proper types for attributes like *n_val* and *allow_mult*. If you use strings instead of integers and booleans respectively, you may see some
odd errors in your logs, saying something like @"{badarith,[{riak_kv_util,normalize_rw_value,2},]}"@.
</div>

h4. Response

Normal status codes:
* 204 No Content

Typical error codes:
* 400 Bad Request - if the submitted JSON is invalid
* 415 Unsupported Media Type - if the Content-Type was not set to application/json in the request

If successful, no content will be returned in the response body.

h4. Example


```bash
$ curl -v -X PUT -H "Content-Type: application/json" -d '{"props":{"n_val":5' http://127.0.0.1:8098/riak/test
* About to connect() to 127.0.0.1 port 8098 (#0)
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 8098 (#0)
> PUT /riak/test HTTP/1.1
> User-Agent: curl/7.19.4 (universal-apple-darwin10.0) libcurl/7.19.4 OpenSSL/0.9.8l zlib/1.2.3
> Host: 127.0.0.1:8098
> Accept: */*
> Content-Type: application/json
> Content-Length: 21
>
< HTTP/1.1 204 No Content
< Vary: Accept-Encoding
< Server: MochiWeb/1.1 WebMachine/1.6 (eat around the stinger)
< Date: Tue, 09 Mar 2010 21:03:52 GMT
< Content-Type: application/json
< Content-Length: 0
<
* Connection #0 to host 127.0.0.1 left intact
* Closing connection #0
```


h2. Object/Key operations

h3. Read object

Reads an object from a bucket.

h3. Request


```bash
GET /riak/bucket/key
```


Important headers:
* *Accept* - When "multipart/mixed" is the preferred content-type, objects with siblings will return all siblings in single request. See [[Get all siblings in one request|REST API#Get all siblings in one request]] example. See also RFC 2616 - [[Accept header definition|http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1]].

Optional headers:
* *If-None-Match* and *If-Modified-Since* invoke conditional request semantics, matching on the *ETag *and *Last-Modified* of the object, respectively.  If the object fails one of the tests (that is, if the ETag is equal or the object is unmodified since the supplied timestamp), Riak will return a "304 Not Modified" response. See also RFC 2616 - [[304 Not Modified|http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5]].

Optional query parameters:
* *r* - (read quorum) how many replicas need to agree when retrieving the object ([[default is defined by the bucket|REST API#Set bucket properties]])
* *vtag=...* - when accessing an object with siblings, which sibling to retrieve. Scroll down to the "Manually requesting siblings" example for more information.

h3. Response

Normal response codes:
* 200 OK
* 300 Multiple Choices
* 304 Not Modified

Typical error codes:
* 400 Bad Request - e.g. when r parameter is invalid (> N)
* 404 Not Found - the object could not be found on enough partitions
* 503 Service Unavailable - the request timed out internally

Important headers:
* *Content-Type* - the media type/format
* *X-Riak-Vclock* - the opaque vector clock for the object
* *X-Riak-Meta* - any user-defined metadata defined when storing the object
* *ETag* - the entity tag for the object, useful for conditional GET operations and validation-based caching
* *Last-Modified* - a timestamp for when the object was last written, in HTTP datetime format
* *Link* - user- and system-defined links to other resources. [[Read more about Links|Links]]

The body of the response will be the contents of the object except when siblings are present.

<div class="note"><div class="title">Siblings</div>
When "allow_mult" is set to true in the bucket properties, concurrent updates are allowed to create "sibling" objects, meaning that the object has any number of different values that are related to one another by the vector clock.  This allows your application to use its own conflict resolution technique.

An object with multiple values will result in a 300 Multiple Choices response.  If the Accept header prefers "multipart/mixed", all siblings will be returned in a single request as chunks of the "multipart/mixed" response body.  Otherwise, a list of "vtags" will be given in a simple text format. You can request individual siblings by adding the vtag query parameter. Scroll down to the "Manually requesting siblings" example for more information.

To resolve the conflict, store the resolved version with the X-Riak-Vclock given in the response.</div>


h3. Simple Example

```bash
$ curl -v http://127.0.0.1:8098/riak/test/doc2
* About to connect() to 127.0.0.1 port 8098 (#0)
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 8098 (#0)
> GET /riak/test/doc2 HTTP/1.1
> User-Agent: curl/7.19.4 (universal-apple-darwin10.0) libcurl/7.19.4 OpenSSL/0.9.8l zlib/1.2.3
> Host: 127.0.0.1:8098
> Accept: */*
>
< HTTP/1.1 200 OK
< X-Riak-Vclock: a85hYGBgzGDKBVIsbLvm1WYwJTLmsTLcjeE5ypcFAA==
< Vary: Accept-Encoding
< Server: MochiWeb/1.1 WebMachine/1.6 (eat around the stinger)
< Link: </riak/test>; rel="up"
< Last-Modified: Wed, 10 Mar 2010 18:11:41 GMT
< ETag: 6dQBm9oYA1mxRSH0e96l5W
< Date: Wed, 10 Mar 2010 18:11:52 GMT
< Content-Type: application/json
< Content-Length: 13
<
* Connection #0 to host 127.0.0.1 left intact
* Closing connection #0
{"foo":"bar"}
```


h3. Siblings examples

h4. Manually requesting siblings

```bash
$ curl -v http://127.0.0.1:8098/riak/test/doc
* About to connect() to 127.0.0.1 port 8098 (#0)
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 8098 (#0)
> GET /riak/test/doc HTTP/1.1
> User-Agent: curl/7.19.4 (universal-apple-darwin10.0) libcurl/7.19.4 OpenSSL/0.9.8l zlib/1.2.3
> Host: 127.0.0.1:8098
> Accept: */*
>
< HTTP/1.1 300 Multiple Choices
< X-Riak-Vclock: a85hYGDgyGDKBVIszMk55zKYEhnzWBlKIniO8kGF2TyvHYIKf0cIszUnMTBzHYVKbIhEUl+VK4spDFTPxhHzFyqhEoVQz7wkSAGLMGuz6FSocFIUijE3pt5HlsgCAA==
< Vary: Accept, Accept-Encoding
< Server: MochiWeb/1.1 WebMachine/1.6 (eat around the stinger)
< Date: Wed, 10 Mar 2010 18:12:29 GMT
< Content-Type: text/plain
< Content-Length: 102
<
Siblings:
16vic4eU9ny46o4KPiDz1f
4v5xOg4bVwUYZdMkqf0d6I
6nr5tDTmhxnwuAFJDd2s6G
6zRSZFUJlHXZ15o9CG0BYl
* Connection #0 to host 127.0.0.1 left intact
* Closing connection #0

$ curl -v http://127.0.0.1:8098/riak/test/doc?vtag=16vic4eU9ny46o4KPiDz1f
* About to connect() to 127.0.0.1 port 8098 (#0)
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 8098 (#0)
> GET /riak/test/doc?vtag=16vic4eU9ny46o4KPiDz1f HTTP/1.1
> User-Agent: curl/7.19.4 (universal-apple-darwin10.0) libcurl/7.19.4 OpenSSL/0.9.8l zlib/1.2.3
> Host: 127.0.0.1:8098
> Accept: */*
>
< HTTP/1.1 200 OK
< X-Riak-Vclock: a85hYGDgyGDKBVIszMk55zKYEhnzWBlKIniO8kGF2TyvHYIKf0cIszUnMTBzHYVKbIhEUl+VK4spDFTPxhHzFyqhEoVQz7wkSAGLMGuz6FSocFIUijE3pt5HlsgCAA==
< Vary: Accept-Encoding
< Server: MochiWeb/1.1 WebMachine/1.6 (eat around the stinger)
< Link: </riak/test>; rel="up"
< Last-Modified: Wed, 10 Mar 2010 18:01:06 GMT
< ETag: 16vic4eU9ny46o4KPiDz1f
< Date: Wed, 10 Mar 2010 18:14:11 GMT
< Content-Type: application/x-www-form-urlencoded
< Content-Length: 13
<
* Connection #0 to host 127.0.0.1 left intact
* Closing connection #0
{"bar":"baz"}
```


h5. Get all siblings in one request

```bash
$ curl -v http://127.0.0.1:8098/riak/test/doc -H "Accept: multipart/mixed"
* About to connect() to 127.0.0.1 port 8098 (#0)
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 8098 (#0)
> GET /riak/test/doc HTTP/1.1
> User-Agent: curl/7.19.4 (universal-apple-darwin10.0) libcurl/7.19.4 OpenSSL/0.9.8l zlib/1.2.3
> Host: 127.0.0.1:8098
> Accept: multipart/mixed
>
< HTTP/1.1 300 Multiple Choices
< X-Riak-Vclock: a85hYGDgyGDKBVIszMk55zKYEhnzWBlKIniO8kGF2TyvHYIKf0cIszUnMTBzHYVKbIhEUl+VK4spDFTPxhHzFyqhEoVQz7wkSAGLMGuz6FSocFIUijE3pt5HlsgCAA==
< Vary: Accept, Accept-Encoding
< Server: MochiWeb/1.1 WebMachine/1.6 (eat around the stinger)
< Date: Wed, 10 Mar 2010 18:13:06 GMT
< Content-Type: multipart/mixed; boundary=YinLMzyUR9feB17okMytgKsylvh
< Content-Length: 766
<

--YinLMzyUR9feB17okMytgKsylvh
Content-Type: application/x-www-form-urlencoded
Link: </riak/test>; rel="up"
Etag: 16vic4eU9ny46o4KPiDz1f
Last-Modified: Wed, 10 Mar 2010 18:01:06 GMT

{"bar":"baz"}
--YinLMzyUR9feB17okMytgKsylvh
Content-Type: application/json
Link: </riak/test>; rel="up"
Etag: 4v5xOg4bVwUYZdMkqf0d6I
Last-Modified: Wed, 10 Mar 2010 18:00:04 GMT

{"bar":"baz"}
--YinLMzyUR9feB17okMytgKsylvh
Content-Type: application/json
Link: </riak/test>; rel="up"
Etag: 6nr5tDTmhxnwuAFJDd2s6G
Last-Modified: Wed, 10 Mar 2010 17:58:08 GMT

{"bar":"baz"}
--YinLMzyUR9feB17okMytgKsylvh
Content-Type: application/json
Link: </riak/test>; rel="up"
Etag: 6zRSZFUJlHXZ15o9CG0BYl
Last-Modified: Wed, 10 Mar 2010 17:55:03 GMT

{"foo":"bar"}
--YinLMzyUR9feB17okMytgKsylvh--
* Connection #0 to host 127.0.0.1 left intact
* Closing connection #0
```


h3. Store a new object without a key

Stores a new object in a bucket with a random Riak-assigned key.

h4. Request


```bash
POST /riak/bucket
```


Important headers:
* *Content-Type* must be set for the stored object. Set what you expect to receive back when next requesting it.
* *X-Riak-Meta* - any additional metadata headers that should be stored with the object.
* *Link* - user and system-defined links to other resources. [[Read more about Links|Links]]


Optional query parameters:
* *w* (write quorum) how many replicas to write to before returning a successful response (default is defined by the bucket level)
* *dw* how many replicas to commit to durable storage before returning a successful response (default is defined at the bucket level)
* *returnbody=[true|false]* whether to return the contents of the stored object.

_+This request must include a body (entity).+_

h4. Response

Normal status codes:
* 201 Created

Typical error codes:
* "400 Bad Request" - e.g. when r, w, or dw parameters are invalid (> N)

Important headers:
* "Location" a relative URL to the newly-created object

If "returnbody=true", any of the response headers expected from Read object may be present.

h4. Example


```bash
$ curl -v -d 'this is a test' -H "Content-Type: text/plain" http://127.0.0.1:8098/riak/test
* About to connect() to 127.0.0.1 port 8098 (#0)
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 8098 (#0)
> POST /riak/test HTTP/1.1
> User-Agent: curl/7.19.4 (universal-apple-darwin10.0) libcurl/7.19.4 OpenSSL/0.9.8l zlib/1.2.3
> Host: 127.0.0.1:8098
> Accept: */*
> Content-Type: text/plain
> Content-Length: 14
>
< HTTP/1.1 201 Created
< Vary: Accept-Encoding
< Server: MochiWeb/1.1 WebMachine/1.6 (eat around the stinger)
< Location: /riak/test/bzPygTesROPtGGVUKfyvp2RR49
< Date: Wed, 10 Mar 2010 13:12:54 GMT
< Content-Type: application/json
< Content-Length: 0
<
* Connection #0 to host 127.0.0.1 left intact
* Closing connection #0
```


h3. Store a new or existing object with a key

Stores an object in a bucket with an existing or user-defined key.

h4. Request


```bash
PUT /riak/bucket/key
```


POST is also a valid verb, for compatibility's sake.

Important headers:
* *Content-Type* must be set for the stored object. Set what you expect to receive back when next requesting it.
* *X-Riak-Vclock* if the object already exists, the vector clock attached to the object when read
* *X-Riak-Meta* any additional metadata headers that should be stored with the object.
* *Link* - user and system-defined links to other resources. [[Read more about Links|Links]]

Optional headers:
* *If-None-Match*, *If-Match*, *If-Modified-Since*, and *If-Unmodified-Since* invoke conditional request semantics, matching on the *ETag* and *Last-Modified* of the existing object.  These can be used to prevent overwriting a modified object.  If the test fails, you will receive a 412 Precondition Failed response. This does not prevent concurrent writes, it is possible for the condition to evaluate to true for multiple requests if the requests occur at the same time.

Optional query parameters:
* *r* (read quorum) how many replicas need to agree when retrieving an existing object before the write (default is defined by the bucket|#Set bucket properties)
* *w* (write quorum) how many replicas to write to before returning a successful response (default is defined by the bucket|#Set bucket properties).
* *dw* how many replicas to commit to durable storage before returning a successful response (default is defined by the bucket|#Set bucket properties)
* *returnbody=[true|false]* whether to return the contents of the stored object.

h4. Response

Normal status codes:
* 200 OK
* 204 No Content
* 300 Multiple Choices

Typical error codes:
* *400 Bad Request* - e.g. when r, w, or dw parameters are invalid (> N)
* *412 Precondition Failed* if one of the conditional request headers failed to match (see above)

If "returnbody=true", any of the response headers expected from Read object may be present. Like Read object, "300 Multiple Choices" may be returned if siblings existed or were created as part of the operation, and the response can be dealt with similarly.

h4. Example


```bash
$ curl -v -X PUT -d '{"bar":"baz"}' -H "Content-Type: application/json" -H "X-Riak-Vclock: a85hYGBgzGDKBVIszMk55zKYEhnzWBlKIniO8mUBAA==" http://127.0.0.1:8098/riak/test/doc?returnbody=true
* About to connect() to 127.0.0.1 port 8098 (#0)
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 8098 (#0)
> PUT /riak/test/doc?returnbody=true HTTP/1.1
> User-Agent: curl/7.19.4 (universal-apple-darwin10.0) libcurl/7.19.4 OpenSSL/0.9.8l zlib/1.2.3
> Host: 127.0.0.1:8098
> Accept: */*
> Content-Type: application/json
> X-Riak-Vclock: a85hYGBgzGDKBVIszMk55zKYEhnzWBlKIniO8mUBAA==
> Content-Length: 13
>
< HTTP/1.1 200 OK
< X-Riak-Vclock: a85hYGBgymDKBVIszMk55zKYEhnzWBlKIniO8kGF2TyvHYIKfwcJZwEA
< Vary: Accept-Encoding
< Server: MochiWeb/1.1 WebMachine/1.6 (eat around the stinger)
< Link: </riak/test>; rel="up"
< Date: Wed, 10 Mar 2010 17:55:03 GMT
< Content-Type: application/json
< Content-Length: 13
<
* Connection #0 to host 127.0.0.1 left intact
* Closing connection #0
{"bar":"baz"}
```


h3. Delete object

Deletes an object from a bucket.

h4. Request


```bash
DELETE /riak/bucket/key
```


Optional query parameters:
* *rw* - quorum for both operations (get and put) involved in deleting an object. (default is set at the bucket level)

h4. Response

Normal response codes:
* 204 No Content
* 404 Not Found

Typical error codes:
* 400 Bad Request - e.g. when rw parameter is invalid (> N)

404 responses are "normal" in the sense that DELETE operations are idempotent and not finding the resource has the same effect as deleting it.

h4. Example


```bash
$ curl -v -X DELETE http://127.0.0.1:8098/riak/test/test2
* About to connect() to 127.0.0.1 port 8098 (#0)
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 8098 (#0)
> DELETE /riak/test/test2 HTTP/1.1
> User-Agent: curl/7.19.4 (universal-apple-darwin10.0) libcurl/7.19.4 OpenSSL/0.9.8l zlib/1.2.3
> Host: 127.0.0.1:8098
> Accept: */*
>
< HTTP/1.1 204 No Content
< Vary: Accept-Encoding
< Server: MochiWeb/1.1 WebMachine/1.6 (eat around the stinger)
< Date: Wed, 10 Mar 2010 12:53:33 GMT
< Content-Type: application/json
< Content-Length: 0
<
* Connection #0 to host 127.0.0.1 left intact
* Closing connection #0
```


h2. Query operations

h3. Link-walking

Link walking finds and returns objects by following links attached to them, starting from the object specified by the bucket and key portion.  It is a special case of [[MapReduce]], and can be expressed more verbosely as such. [[Read more about Links|Links]].

h4. Request


```bash
GET /riak/bucket/key/[[link specs+]]
```



<div class="info"><div class="title">Link specifications</div>A link specification within the request URL is made of three parts:

* Bucket - a bucket name to limit the links to
* Tag - a "riaktag" to limit the links to
* Keep - 0 or 1, whether to return results from this phase

Any of the three parts may be replaced with "{_}", signifying that any value is valid. Multiple phases of links can be followed by adding additional path segments to the URL, separating the link specifications by slashes. The final phase in the link-walking query implicitly returns its results.</div>


h4. Response

Normal status codes:
* 200 OK

Typical error codes:
* 400 Bad Request - if the format of the query in the URL is invalid
* 404 Not Found - if the origin object of the walk was missing

Important headers:
* Content-Type - always multipart/mixed, with a boundary specified


<div class="note"><div class="title">Understanding the response body</div>The response body will always be multipart/mixed, with each chunk representing a single phase of the link-walking query.  Each phase will also be encoded in multipart/mixed, with each chunk representing a single object that was found. If no objects were found or "keep" was not set on the phase, no chunks will be present in that phase.  Objects inside phase results will include Location headers that can be used to determine bucket and key. In fact, you can treat each object-chunk similarly to a complete response from [[read object|REST API#Read object]], without the status code.</div>


h4. Example


```bash
$ curl -v http://127.0.0.1:8098/riak/test/doc3/test,_,1/_,next,1
* About to connect() to 127.0.0.1 port 8098 (#0)
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 8098 (#0)
> GET /riak/test/doc3/test,_,1/_,next,1 HTTP/1.1
> User-Agent: curl/7.19.4 (universal-apple-darwin10.0) libcurl/7.19.4 OpenSSL/0.9.8l zlib/1.2.3
> Host: 127.0.0.1:8098
> Accept: */*
>
< HTTP/1.1 200 OK
< Server: MochiWeb/1.1 WebMachine/1.6 (eat around the stinger)
< Expires: Wed, 10 Mar 2010 20:24:49 GMT
< Date: Wed, 10 Mar 2010 20:14:49 GMT
< Content-Type: multipart/mixed; boundary=JZi8W8pB0Z3nO3odw11GUB4LQCN
< Content-Length: 970
<

--JZi8W8pB0Z3nO3odw11GUB4LQCN
Content-Type: multipart/mixed; boundary=OjZ8Km9J5vbsmxtcn1p48J91cJP

--OjZ8Km9J5vbsmxtcn1p48J91cJP
X-Riak-Vclock: a85hYGDgymDKBVIszMk55zKYEhnzWBlKIniO8kGF2TyvHYIKf0cIszUnMTBzHYVKbIhEUl+VK4spDFTPxhHzFyqhEoVQz7wkSAGLMGuz6FSocFIUijE3pt7HlGBhnqejARXmq0QyZnnxE6jwVJBwFgA=
Location: /riak/test/doc
Content-Type: application/json
Link: </riak/test>; rel="up", </riak/test/doc2>; riaktag="next"
Etag: 3pvmY35coyWPxh8mh4uBQC
Last-Modified: Wed, 10 Mar 2010 20:14:13 GMT

{"riak":"CAP"}
--OjZ8Km9J5vbsmxtcn1p48J91cJP--

--JZi8W8pB0Z3nO3odw11GUB4LQCN
Content-Type: multipart/mixed; boundary=RJKFlAs9PrdBNfd74HANycvbA8C

--RJKFlAs9PrdBNfd74HANycvbA8C
X-Riak-Vclock: a85hYGBgzGDKBVIsbLvm1WYwJTLmsTLcjeE5ypcFAA==
Location: /riak/test/doc2
Content-Type: application/json
Link: </riak/test>; rel="up"
Etag: 6dQBm9oYA1mxRSH0e96l5W
Last-Modified: Wed, 10 Mar 2010 18:11:41 GMT

{"foo":"bar"}
--RJKFlAs9PrdBNfd74HANycvbA8C--

--JZi8W8pB0Z3nO3odw11GUB4LQCN--
* Connection #0 to host 127.0.0.1 left intact
* Closing connection #0
```


h3. MapReduce

MapReduce is a generic way to query Riak by specifying inputs and constructing a set of map, reduce, and link phases through which data will flow. [[Read more about MapReduce|MapReduce]].

h4. Request


```bash
POST /mapred
```


Important headers:
* *Content-Type* - must always be application/json.  The format of the request body is described in detail on the [[MapReduce]] page.

Optional query parameters:
* *chunked* - when set to true, results will be returned one at a time in multipart/mixed format using chunked-encoding.

h4. Response

Normal status codes:
* 200 OK

Typical error codes:
* 400 Bad Request - if an invalid job is submitted.

Important headers:
* Content-Type - application/json when chunked is not true, otherwise multipart/mixed with application/json parts

h4. Example


```bash
$ curl -v -d '{"inputs":"test", "query":[{"link":{"bucket":"test",{"map":{"language":"javascript","name":"Riak.mapValuesJson"]}' -H "Content-Type: application/json" http://127.0.0.1:8098/mapred
* About to connect() to 127.0.0.1 port 8098 (#0)
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 8098 (#0)
> POST /mapred HTTP/1.1
> User-Agent: curl/7.19.4 (universal-apple-darwin10.0) libcurl/7.19.4 OpenSSL/0.9.8l zlib/1.2.3
> Host: 127.0.0.1:8098
> Accept: */*
> Content-Type: application/json
> Content-Length: 117
>
< HTTP/1.1 200 OK
< Server: MochiWeb/1.1 WebMachine/1.6 (eat around the stinger)
< Date: Wed, 10 Mar 2010 20:47:47 GMT
< Content-Type: application/json
< Content-Length: 30
<
* Connection #0 to host 127.0.0.1 left intact
* Closing connection #0
[{"foo":"bar"},{"riak":"CAP"}]
```


h2. Other operations

h3. List Resources

List available HTTP resources for the Riak node.

h4. Request

```bash
GET /
```

Headers:
* Accept - @application/json@ or @text/html@

h4. Response

Normal status codes:
* 200 OK

h4. Example

```bash
# Request JSON response
curl -i http://localhost:8098 -H "Accept: application/json"
HTTP/1.1 200 OK
Vary: Accept
Server: MochiWeb/1.1 WebMachine/1.7.3 (participate in the frantic)
Link: </riak>; rel="riak_kv_wm_link_walker",</mapred>; rel="riak_kv_wm_mapred",</ping>; rel="riak_kv_wm_ping",</riak>; rel="riak_kv_wm_raw",</stats>; rel="riak_kv_wm_stats"
Date: Tue, 04 Jan 2011 00:33:39 GMT
Content-Type: application/json
Content-Length: 143

{"riak_kv_wm_link_walker":"/riak","riak_kv_wm_mapred":"/mapred","riak_kv_wm_ping":"/ping","riak_kv_wm_raw":"/riak","riak_kv_wm_stats":"/stats"}
```

```bash
# Request HTML response
curl -i http://localhost:8098 -H "Accept: text/html"
HTTP/1.1 200 OK
Vary: Accept
Server: MochiWeb/1.1 WebMachine/1.7.3 (participate in the frantic)
Link: </riak>; rel="riak_kv_wm_link_walker",</mapred>; rel="riak_kv_wm_mapred",</ping>; rel="riak_kv_wm_ping",</riak>; rel="riak_kv_wm_raw",</stats>; rel="riak_kv_wm_stats"
Date: Tue, 04 Jan 2011 00:35:54 GMT
Content-Type: text/html
Content-Length: 267

<html><body><ul><li><a
href="/riak">riak_kv_wm_link_walker</a></li><li><a
href="/mapred">riak_kv_wm_mapred</a></li><li><a
href="/ping">riak_kv_wm_ping</a></li><li><a
href="/riak">riak_kv_wm_raw</a></li><li><a
href="/stats">riak_kv_wm_stats</a></li></ul></body></html>
```

h3. Ping

Check if the server is alive.

h4. Request


```bash
GET /ping
```


h4. Response

Normal status codes:
* 200 OK

h4. Example


```bash
curl -v http://127.0.0.1:8098/ping
* About to connect() to 127.0.0.1 port 8098 (#0)
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 8098 (#0)
> GET /ping HTTP/1.1
> User-Agent: curl/7.19.7 (universal-apple-darwin10.0) libcurl/7.19.7 OpenSSL/0.9.8l zlib/1.2.3
> Host: 127.0.0.1:8098
> Accept: */*
>
< HTTP/1.1 200 OK
< Server: MochiWeb/1.1 WebMachine/1.7.1 (participate in the frantic)
< Date: Fri, 16 Jul 2010 02:34:26 GMT
< Content-Type: text/html
< Content-Length: 2
<
* Connection #0 to host 127.0.0.1 left intact
* Closing connection #0
OK
```


h3. Server status

Reports about the performance and configuration of the Riak node to which it was requested.  You must have the {riak_kv_stat,true} configuration setting in app.config for this endpoint to be active.

h4. Request


```bash
GET /stats
```


Important headers:
* Accept - determines whether the response will be formatted in application/json or text/plain.
* Content-Type - application/json or text/plain (JSON with added line-breaks)

h4. Response

Normal status codes:
* 200 OK

h4. Example


```bash
$ curl -v http://127.0.0.1:8098/stats -H "Accept: text/plain"
* About to connect() to 127.0.0.1 port 8098 (#0)
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 8098 (#0)
> GET /stats HTTP/1.1
> User-Agent: curl/7.19.7 (universal-apple-darwin10.0) libcurl/7.19.7 OpenSSL/0.9.8l zlib/1.2.3
> Host: 127.0.0.1:8098
> Accept: text/plain
>
< HTTP/1.1 200 OK
< Vary: Accept, Accept-Encoding
< Server: MochiWeb/1.1 WebMachine/1.7.1 (participate in the frantic)
< Date: Wed, 14 Jul 2010 18:13:04 GMT
< Content-Type: text/plain
< Content-Length: 2102
<
{
    "vnode_gets": 0,
    "vnode_puts": 0,
    "read_repairs": 0,
    "vnode_gets_total": 0,
    "vnode_puts_total": 0,
    "node_gets": 0,
    "node_gets_total": 0,
    "node_get_fsm_time_mean": "undefined",
    "node_get_fsm_time_median": "undefined",
    "node_get_fsm_time_95": "undefined",
    "node_get_fsm_time_99": "undefined",
    "node_get_fsm_time_100": "undefined",
    "node_puts": 0,
    "node_puts_total": 0,
    "node_put_fsm_time_mean": "undefined",
    "node_put_fsm_time_median": "undefined",
    "node_put_fsm_time_95": "undefined",
    "node_put_fsm_time_99": "undefined",
    "node_put_fsm_time_100": "undefined",
    "read_repairs_total": 0,
    "cpu_nprocs": 84,
    "cpu_avg1": 251,
    "cpu_avg5": 174,
    "cpu_avg15": 110,
    "mem_total": 7946684000.0,
    "mem_allocated": 4340880000.0,
    "nodename": "riak@127.0.0.1",
    "connected_nodes": [

    ],
    "sys_driver_version": "1.5",
    "sys_global_heaps_size": 0,
    "sys_heap_type": "private",
    "sys_logical_processors": 2,
    "sys_otp_release": "R13B04",
    "sys_process_count": 189,
    "sys_smp_support": true,
    "sys_system_version": "Erlang R13B04 (erts-5.7.5) [[source]] [[64-bit]] [[smp:2:2]] [[rq:2]] [[async-threads:5]] [[hipe]] [[kernel-poll:true]]",
    "sys_system_architecture": "i386-apple-darwin10.3.0",
    "sys_threads_enabled": true,
    "sys_thread_pool_size": 5,
    "sys_wordsize": 8,
    "ring_members": [
        "riak@127.0.0.1"
    ],
    "ring_num_partitions": 64,
    "ring_ownership": "[{'riak@127.0.0.1',64}]",
    "ring_creation_size": 64,
    "storage_backend": "riak_kv_bitcask_backend",
    "pbc_connects_total": 0,
    "pbc_connects": 0,
    "pbc_active": 0,
    "riak_kv_version": "0.11.0",
    "riak_core_version": "0.11.0",
    "bitcask_version": "1.0.1",
    "luke_version": "0.1",
    "webmachine_version": "1.7.1",
    "mochiweb_version": "1.7.1",
    "erlang_js_version": "0.4",
    "runtime_tools_version": "1.8.3",
    "crypto_version": "1.6.4",
    "os_mon_version": "2.2.5",
    "sasl_version": "2.1.9",
    "stdlib_version": "1.16.5",
    "kernel_version": "2.13.5"
* Connection #0 to host 127.0.0.1 left intact
* Closing connection #0
}
```
